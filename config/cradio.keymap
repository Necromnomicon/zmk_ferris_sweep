/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "combos.dtsi"

/* key assignments
  0  1  2  3  4       5  6  7  8  9
  10 11 12 13 14      15 16 17 18 19
  20 21 22 23 24      25 26 27 28 29
            30 31     32 33
*/

#define ALPHA 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUN 4
#define GAME 5
#define GAME2 6


&sk {
    ignore-modifiers; //allows for calum-style modifers 
};



  
/ { 
   //this gives quick relese to any sticky key if it's labled &skq 
	behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <300>;
        quick-release;
        };
    };
		
	behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;    // <---[[moderate duration]]
            quick-tap-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
};    

ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&comma_inner_morph>;
)
ZMK_BEHAVIOR(comma_inner_morph, mod_morph,
    bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&dot_inner_morph>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_inner_morph, mod_morph,
    bindings = <&kp COLON>, <&kp GREATER_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)
 
// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

/{
        keymap {
                compatible = "zmk,keymap";
                
       		alpha_layer {
		bindings = <
		&kp Q &kp W &kp F &kp P &kp B 						&kp J &kp L &kp U &kp Y &kp APOS 
		&bhm LGUI A &bhm LALT R &bhm LCTRL S &bhm LSHFT T &kp G 			        	&kp M &bhm LSHFT N &bhm LCTRL E &bhm LALT I &bhm LGUI O
		&kp Z &kp X &kp C &kp D &kp V				        &kp K &kp H &comma_morph &dot_morph &qexcl 
          				&sl NUM &smart_shft                   &lt_spc NAV &mo FUN
		>;
		};

       		nav_layer {
		bindings = <
        &kp PG_UP   &kp HOME  &kp UP    &kp END    &kp C_VOL_UP       &none &none &none &none &none
        &kp PG_DN   &kp LEFT  &kp DOWN  &kp RIGHT  &kp C_VOL_DN       &none &sk RSHFT  &sk RCTRL  &sk LALT  &sk RGUI 
        &kp LC(Z)   &kp LC(X) &kp LC(C) &kp LC(V)  &kp K_APP          &none &kp LC(K) &none &none &none
                                            &none &smart_shft        &trans &trans
        >;
		};
		
		    num_layer {
		bindings = <
		&kp TAB   &kp BSPC  &kp DEL    &kp DLLR    &kp PRCNT   	            	&kp EQUAL  &kp N7 &kp N8 &kp N9 &kp COMMA 
		&sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT   &kp LC(G) 					&kp PLUS   &kp N4 &kp N5 &kp N6 &kp ASTRK
		&kp LC(Z) &kp LC(X) &kp LC(C)  &kp LC(V)   &kp K_APP  		       		&kp MINUS  &kp N1 &kp N2 &kp N3 &kp SLASH
					                        &trans &trans           &kp N0  &kp DOT
		>;
		};	

		
		    sym_layer {
		bindings = <
		&kp ESC   &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    	&kp EQUAL  &kp LC(LEFT)  &kp CARET &kp LC(RIGHT) &none 
		&kp GRAVE &kp LBKT  &kp LBRC  &kp LPAR  &kp LT 	        &kp PLUS   &kp AMPS      &kp ASTRK &kp COLON     &kp SEMI
		&kp TILDE &kp RBKT  &kp RBRC  &kp RPAR  &kp GT   		&kp MINUS  &kp UNDER     &kp BSLH  &kp PIPE      &kp SLASH
					                	&trans  &sl FUN      	&trans &trans 
		>;
		};	

            fun_layer {
		bindings = <
		&bt BT_CLR   &none        &none        &none        &bootloader     &bootloader  &kp F7  &kp F8  &kp F9 &kp F10
		&sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT    &sys_reset           &sys_reset      &kp F4  &kp F5  &kp F6 &kp F11
		&bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &none      		&none 		&kp F1  &kp F2  &kp F3 &kp F12  
					                    &none &none                   		&none &none
		>;
		};
    
            game_layer {
		bindings = <
		&kp TAB   &kp Q  &kp W  &kp E  &kp R 					    &kp Y &kp U &kp I &kp O &kp P 
		&kp LCTRL &kp A  &kp S  &kp D  &kp F 			        	&kp H &kp J &kp K &kp L &kp RET
		&kp LSHFT &kp Z  &kp X  &kp C  &kp V				        &kp B &kp N &kp M &kp SLASH &kp ESC
          				&sl GAME2 &kp SPACE                   &kp LCTRL &kp LSHIFT
		>;
		};

            game2_layer {
		bindings = <
		&kp N6    &kp N7 &kp N8 &kp N9 &kp N0						&kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
		&kp N1    &kp N2 &kp N3 &kp N4 &kp N5			        	&kp F1 &kp F2 &kp F3 &kp F4 &kp F5
		&sk LALT  &kp T  &kp G  &kp B  &kp M 				        &kp F11 &kp F12 &kp COMMA &kp DOT &kp SLASH
          				&trans &kp SPACE                        &kp SPC &kp ESC
		>;
		};
	};
};
